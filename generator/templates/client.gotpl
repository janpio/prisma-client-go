{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

var schemaPath = "{{ .SchemaPath }}"

var binaries = map[string]string{
	{{ range $i, $binary := $.BinaryPaths.QueryEngine }}
		"{{ $i }}": "{{ $binary }}",
	{{ end }}
}

func getPort() (string, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return "", err
	}

	l, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return "", err
	}
	defer l.Close()

	port := l.Addr().(*net.TCPAddr).Port
	return strconv.Itoa(port), nil
}

// NewClient creates a new Photon Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//   client := photon.NewClient()
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect %w", err))
//     }
//   }()
func NewClient() Client {
	c := Client{}
	c.log = log.New(ioutil.Discard, "", 0)
	if debug == Info {
		c.log = log.New(os.Stdout, "", log.Flags())
	}

	c.http = &http.Client{
		Timeout: 30 * time.Second,
	}

	return c
}

// Client is the instance of the Photon Go client.
type Client struct {
	// cmd holds the prisma binary process
	cmd *exec.Cmd

	// url holds the query-engine url
	url string

	// http is the internal http client
	http *http.Client

	// logger logs depending on the debug value
	log *log.Logger

	{{ range $model := $.DMMF.Datamodel.Models }}
		// {{ $model.Name.GoCase }} provides access to CRUD methods.
		{{ $model.Name.GoCase }} {{ $model.Name.GoLowerCase }}Actions
	{{- end }}
}

// Connects to the Prisma query engine. Required to call before accessing data.
// It is recommended to immediately defer calling Disconnect.
//
// Example:
//
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect %w", err))
//     }
//   }()
func (c *Client) Connect() error {
	c.log.Printf("connecting...")

	port, err := getPort()
	if err != nil {
		return fmt.Errorf("get free port: %w", err)
	}

	c.url = "http://localhost:" + string(port)

	{{- range $model := $.DMMF.Datamodel.Models }}
		c.{{ $model.Name.GoCase }} = {{ $model.Name.GoLowerCase }}Actions{client: c}
	{{- end }}

	var path string
	for _, value := range binaries {
		path = value
		break
	}

	c.cmd = exec.Command(path, "-p", string(port))

	c.cmd.Stdout = os.Stdout
	c.cmd.Stderr = os.Stderr

	c.cmd.Env = append(
		os.Environ(),
		"PRISMA_DML_PATH=" + schemaPath,
		"RUST_LOG=error",
		"RUST_LOG_FORMAT=json",
	)

	if debug == Debug {
		c.cmd.Env = append(
			c.cmd.Env,
			"PRISMA_DML_PATH=" + schemaPath,
			"PRISMA_LOG_QUERIES=y",
			"RUST_LOG=info",
		)
	}

	err = c.cmd.Start()
	if err != nil {
		return fmt.Errorf("start command: %w", err)
	}

	ctx := context.Background()

	// send a basic readiness healthcheck and retry if unsuccessful
	var connectErr error
	var gqlErrors []gqlError
	for i := 0; i < 10; i++ {
		body, err := c.request(ctx, "GET", "/status", map[string]interface{}{})

		if err != nil {
			connectErr = err
			c.log.Printf("could not connect; retrying...")
			time.Sleep(100 * time.Millisecond)
			continue
		}

		var response gqlResponse

		err = json.Unmarshal(body, &response)
		if err != nil {
			connectErr = err
			c.log.Printf("could not unmarshal response; retrying...")
			time.Sleep(100 * time.Millisecond)
			continue
		}

		if response.Errors != nil {
			gqlErrors = response.Errors
			c.log.Printf("could not connect due to gql errors; retrying...")
			time.Sleep(100 * time.Millisecond)
			continue
		}

		connectErr = nil
		gqlErrors = nil
		break
	}

	if connectErr != nil {
		return fmt.Errorf("readiness query error: %w", connectErr)
	}

	if gqlErrors != nil {
		return fmt.Errorf("readiness gql errors: %+v", gqlErrors)
	}

	c.log.Printf("connected.")
	return nil
}

// Disconnects from the Prisma query engine.
// This is usually invoked on kill signals in long running applications (like webservers),
// or when no database access is needed anymore (like after executing a CLI command).
//
// Should be usually invoked directly after calling client.Connect(), for example as follows:
//
//   // after client.Connect()
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect %w", err))
//     }
//   }()
func (c *Client) Disconnect() error {
	c.log.Printf("disconnecting...")

	err := c.cmd.Process.Signal(os.Interrupt)
	if err != nil {
		return fmt.Errorf("send signal: %w", err)
	}

	err = c.cmd.Wait()
	if err != nil {
		return fmt.Errorf("wait for process: %w", err)
	}

	c.log.Printf("disconnected.")
	return nil
}

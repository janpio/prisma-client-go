{{- /*gotype:github.com/prisma/prisma-client-go/generator.Root*/ -}}

const schema = `{{ .Datamodel }}`

{{ $hasBinaryTargets := false }}
{{ if gt (len .Generator.BinaryTargets) 0 }}
	{{ $hasBinaryTargets = true }}
{{ end }}

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = {{ $hasBinaryTargets }}

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//   client := db.NewClient()
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func NewClient() *PrismaClient {
	c := &PrismaClient{}

	c.Engine = engine.NewEngine(schema, hasBinaryTargets)

	{{- range $model := $.DMMF.Datamodel.Models }}
		c.{{ $model.Name.GoCase }} = {{ $model.Name.GoLowerCase }}Actions{client: c}
	{{- end }}

	c.Actions = &raw.Actions{Client: c}

	return c
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine spawns and manages the binary
	*engine.Engine

	*raw.Actions

	{{ range $model := $.DMMF.Datamodel.Models }}
		// {{ $model.Name.GoCase }} provides access to CRUD methods.
		{{ $model.Name.GoCase }} {{ $model.Name.GoLowerCase }}Actions
	{{- end }}
}

// Connects to the Prisma query engine. Required to call before accessing data.
// It is recommended to immediately defer calling Disconnect.
//
// Example:
//
//   err := client.Connect()
//   if err != nil {
//     handle(err)
//   }
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Connect() error {
	return c.Engine.Connect()
}

// Disconnects from the Prisma query engine.
// This is usually invoked on kill signals in long running applications (like webservers),
// or when no database access is needed anymore (like after executing a CLI command).
//
// Should be usually invoked directly after calling client.Connect(), for example as follows:
//
//   // after client.Connect()
//
//   defer func() {
//     err := client.Disconnect()
//     if err != nil {
//       panic(fmt.Errorf("could not disconnect: %w", err))
//     }
//   }()
func (c *PrismaClient) Disconnect() error {
	return c.Engine.Disconnect()
}

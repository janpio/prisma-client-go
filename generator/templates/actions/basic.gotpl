{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{/* This file outputs methods and varations for Find and Delete, because they work similarly. */}}
{{/* Update and Delete operations live in their own files. */}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ range $v := $.DMMF.Basic }}
		{{ $name := $model.Name.GoLowerCase }}
		{{ $modelName := (print $model.Name.GoCase "Model") }}
		{{ $ns := (print $name "Actions") }}
		{{ $result := (print $name $v.Name) }}
		{{ $params := (print "i" $model.Name.GoCase "Params") }}

		// {{ $v.Name }} returns {{ $v.Name.CamelCase }} user{{ if $v.List }}s{{ end }}.
		func (r {{ $ns }}) {{ $v.Name }}(params ...{{ $params }}{{ if not $v.List }}Unique{{ end }}) {{ $result }} {
			var v {{ $result }}
			v.query.client = r.client
			var fields []field
			for _, q := range params {
				fields = append(fields, q.field())
			}
			v.query.inputs = append(v.query.inputs, input{
				name:   "where",
				fields: fields,
			})
			return v
		}

		type {{ $result }} struct {
			query query
		}

		// Exec runs the {{ $v.Name }} query and returns user{{ if $v.List }}a {{ $model.Name.GoLowerCase }}{{ else }}a {{ $model.Name.GoCase }}{{ end }}.
		func (r {{ $result }}) Exec(ctx context.Context) ({{ if $v.List }}[]{{ end }}{{ $modelName }}, error) {
			r.query.operation = "{{ $v.Type }}"
			r.query.method = "{{ $v.Name.CamelCase }}"
			r.query.model = "{{ $model.Name.GoCase }}"
			r.query.outputs = {{ $name }}Outputs
			var v {{ $v.Name.GoLowerCase }}{{ $model.Name.GoCase }}Response
			err := r.query.exec(ctx, &v)
			return v.Data.{{ $v.Name }}{{ $model.Name.GoCase }}, err
		}
	{{ end }}
{{ end }}

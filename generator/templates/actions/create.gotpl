{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ range $v := $.DMMF.Variations }}
		{{ $name := $model.Name.GoCase }}
		{{ $modelName := (print $model.Name.GoCase "Model") }}
		{{ $ns := (print $name "Actions") }}
		{{ $result := (print $name "Create" $v.Name) }}
		{{ $params := (print $name "Params") }}

		func (r {{ $ns }}) Create{{ $v.Name }}(
			{{ range $field := $model.Fields -}}
				{{- if $field.IsRequired -}}
					{{ $field.Name.GoLowerCase }} {{ $params }},
				{{- end }}
			{{- end -}}
			optional ...{{ $params }},
		) {{ $result }} {
			var v {{ $result }}
			v.query.client = r.client
			var fields []field

			{{ range $field := $model.Fields }}
				{{- if $field.IsRequired -}}
					fields = append(fields, {{ $field.Name.GoLowerCase }}.data)
				{{- end }}
			{{ end }}

			for _, q := range optional {
				fields = append(fields, q.data)
			}

			v.query.inputs = append(v.query.inputs, input{
				name:   "data",
				fields: fields,
			})
			return v
		}

		type {{ $result }} struct {
			query query
		}

		func (r {{ $result }}) Exec(ctx context.Context) ({{ if $v.List }}[]{{ end }}{{ $modelName }}, error) {
			r.query.operation = "mutation"
			r.query.method = "create{{ $v.Name }}"
			r.query.model = "{{ $name }}"
			r.query.outputs = {{ $model.Name.GoLowerCase }}Outputs
			var v Create{{ $v.Name }}{{ $name }}Response
			err := r.query.exec(ctx, &v)
			return v.Data.Create{{ $v.Name }}{{ $name }}, err
		}
	{{ end }}
{{ end }}

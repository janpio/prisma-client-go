{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $modelName := (print $model.Name.GoCase "Model") }}
	{{ $ns := (print $name "Actions") }}
	{{ $result := (print $name "Create" "One") }}

	// Creates a single user.
	func (r {{ $ns }}) CreateOne(
		{{ range $field := $model.Fields -}}
			{{- if $field.RequiredOnCreate -}}
				// {{ $field.Default }}
				{{ $field.Name.GoLowerCase }} {{ $name }}{{ $field.Name.GoCase }}SetParams,
			{{- end -}}
		{{ end }}
		optional ...{{ $name }}SetParams,
	) {{ $result }} {
		var v {{ $result }}
		v.query.client = r.client
		var fields []field

		{{ range $field := $model.Fields }}
			{{- if $field.RequiredOnCreate -}}
				fields = append(fields, {{ $field.Name.GoLowerCase }}.data)
			{{- end }}
		{{ end }}

		for _, q := range optional {
			fields = append(fields, q.data)
		}

		v.query.inputs = append(v.query.inputs, input{
			name:   "data",
			fields: fields,
		})
		return v
	}

	type {{ $result }} struct {
		query query
	}

	func (r {{ $result }}) Exec(ctx context.Context) ({{ $modelName }}, error) {
		r.query.operation = "mutation"
		r.query.method = "createOne"
		r.query.model = "{{ $model.Name.GoCase }}"
		r.query.outputs = {{ $name }}Output
		var v createOne{{ $model.Name.GoCase }}Response
		err := r.query.exec(ctx, &v)
		if v.Errors != nil {
			first := v.Errors[0]
			return {{ $modelName }}{}, fmt.Errorf(first.Message)
		}
		return v.Data.CreateOne{{ $model.Name.GoCase }}, err
	}
{{ end }}

{{- /*gotype:github.com/prisma/prisma-client-go/generator.Root*/ -}}

var countOutput = []builder.Output{
	{Name: "count"},
}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $ns := (print $name "Actions") }}

	type {{ $ns }} struct {
		// client holds the prisma client
		client *PrismaClient
	}

	var {{ $name }}Output = []builder.Output{
		{{- range $i := $model.Fields }}
			{{- if $i.Kind.IncludeInStruct }}
				{Name: "{{ $i.Name }}"},
			{{- end }}
		{{- end }}
	}

	type i{{ $model.Name.GoCase }}RelationWith interface {
		getQuery() builder.Query
		with()
		{{ $model.Name.GoLowerCase }}Relation()
	}

	type {{ $model.Name.GoCase }}QueryParams interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}Params struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}Params) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}Params) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}Params) {{ $model.Name.GoLowerCase }}Model() {}

	type i{{ $model.Name.GoCase }}OrderByParams interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}OrderByParams struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}OrderByParams) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}OrderByParams) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}OrderByParams) {{ $model.Name.GoLowerCase }}Model() {}

	type i{{ $model.Name.GoCase }}CursorParams interface {
		field() builder.Field
		getQuery() builder.Query
		{{ $model.Name.GoLowerCase }}Model()
		isCursor()
	}

	type {{ $name }}CursorParams struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}CursorParams) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}CursorParams) isCursor() {}

	func (p {{ $name }}CursorParams) getQuery() builder.Query {
		return p.query
	}

	func (p {{ $name }}CursorParams) {{ $model.Name.GoLowerCase }}Model() {}

	{{/* TODO remove getQuery() builder.Field from Unique input and create a separate input for that with variadic parameters */}}
	type {{ $model.Name.GoCase }}ParamsUnique interface {
		field() builder.Field
		getQuery() builder.Query
		unique()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}ParamsUnique struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}ParamsUnique) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}ParamsUnique) unique() {}

	func (p {{ $name }}ParamsUnique) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}ParamsUnique) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}EqualsQueryParams interface {
		field() builder.Field
		getQuery() builder.Query
		equals()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}EqualsParams struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}EqualsParams) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}EqualsParams) equals() {}

	func (p {{ $name }}EqualsParams) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}EqualsParams) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}EqualsUniqueQueryParams interface {
		field() builder.Field
		getQuery() builder.Query
		equals()
		unique()
		{{ $model.Name.GoLowerCase }}Model()
	}

	type {{ $name }}EqualsUniqueParams struct {
		data builder.Field
		query builder.Query
	}

	func (p {{ $name }}EqualsUniqueParams) {{ $model.Name.GoLowerCase }}Model() {}

	func ({{ $name }}EqualsUniqueParams) unique() {}
	func ({{ $name }}EqualsUniqueParams) equals() {}

	func (p {{ $name }}EqualsUniqueParams) field() builder.Field {
		return p.data
	}

	func (p {{ $name }}EqualsUniqueParams) getQuery() builder.Query {
		return p.query
	}

	type {{ $model.Name.GoCase }}MutateParams interface {
		field() builder.Field
		settable()
	}

	type {{ $name }}SetParams struct {
		data builder.Field
	}

	func ({{ $name }}SetParams) settable() {}

	func (p {{ $name }}SetParams) field() builder.Field {
		return p.data
	}

	{{ range $field := $model.Fields }}
		{{ $prefix := (print $name "WithPrisma" $field.Name.GoCase) }}

		type {{ $model.Name.GoCase }}WithPrisma{{ $field.Name.GoCase }}EqualsMutateParams interface {
			field() builder.Field
			getQuery() builder.Query
			equals()
			{{ $model.Name.GoLowerCase }}Model()
			{{ $field.Name.GoLowerCase }}Field()
		}

		{{ range $action := $model.Actions }}
			type {{ $model.Name.GoCase }}WithPrisma{{ $field.Name.GoCase }}{{ if eq $action "Set" }}Mutate{{ else }}Query{{ end }}Params interface {
				field() builder.Field
				getQuery() builder.Query
				{{ $model.Name.GoLowerCase }}Model()
				{{ $field.Name.GoLowerCase }}Field()
			}

			type {{ $prefix }}{{ $action }}Params struct {
				data builder.Field
				query builder.Query
			}

			func (p {{ $prefix }}{{ $action }}Params) field() builder.Field {
				return p.data
			}

			func (p {{ $prefix }}{{ $action }}Params) getQuery() builder.Query {
				return p.query
			}

			func (p {{ $prefix }}{{ $action }}Params) {{ $model.Name.GoLowerCase }}Model() {}

			func (p {{ $prefix }}{{ $action }}Params) {{ $field.Name.GoLowerCase }}Field() {}
		{{ end }}

		func ({{ $prefix }}SetParams) settable() {}
		func ({{ $prefix }}EqualsParams) equals() {}

		type {{ $prefix }}EqualsUniqueParams struct {
			data builder.Field
			query builder.Query
		}

		func (p {{ $prefix }}EqualsUniqueParams) field() builder.Field {
			return p.data
		}

		func (p {{ $prefix }}EqualsUniqueParams) getQuery() builder.Query {
			return p.query
		}

		func (p {{ $prefix }}EqualsUniqueParams) {{ $model.Name.GoLowerCase }}Model() {}
		func (p {{ $prefix }}EqualsUniqueParams) {{ $field.Name.GoLowerCase }}Field() {}

		func ({{ $prefix }}EqualsUniqueParams) unique() {}
		func ({{ $prefix }}EqualsUniqueParams) equals() {}
	{{ end }}
{{ end }}

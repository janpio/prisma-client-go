{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

var countOutput = []field{
	{name: "count"},
}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $modelName := (print $model.Name.GoCase "Model") }}
	{{ $ns := (print $name "Actions") }}
	{{ $nsFindOne := (print $name "FindOne") }}
	{{ $nsParams := (print $name "Params") }}

	type {{ $ns }} struct {
		// client holds the photon client
		client *Client
	}

	var {{ $name }}Output = []field{
		{{- range $i := $model.Fields }}
			{{- if $i.Kind.IncludeInStruct }}
				{name: "{{ $i.Name.CamelCase }}"},
			{{- end }}
		{{- end }}
	}

	type i{{ $model.Name.GoCase }}Params interface {
		field() field
	}

	type {{ $name }}Params struct {
		data field
	}

	func (p {{ $name }}Params) field() field {
		return p.data
	}

	type i{{ $model.Name.GoCase }}ParamsUnique interface {
		field() field
		unique()
	}

	type {{ $name }}ParamsUnique struct {
		data field
	}

	func ({{ $name }}ParamsUnique) unique() {}

	func (p {{ $name }}ParamsUnique) field() field {
		return p.data
	}

	type i{{ $model.Name.GoCase }}SetParams interface {
		field() field
		isSetParam()
	}

	type {{ $name }}SetParams struct {
		data field
	}

	func ({{ $name }}SetParams) isSetParam() {}

	func (p {{ $name }}SetParams) field() field {
		return p.data
	}

	{{ range $field := $model.Fields }}
		type {{ $name }}{{ $field.Name.GoCase }}SetParams struct {
			data field
		}

		func ({{ $name }}{{ $field.Name.GoCase }}SetParams) isSetParam() {}

		func (p {{ $name }}{{ $field.Name.GoCase }}SetParams) field() field {
			return p.data
		}
	{{ end }}
{{ end }}

{{- /*gotype:github.com/prisma/prisma-client-go/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $nameUpper := $model.Name.GoCase }}
	{{ $nsQuery := (print $name "Query") }}

	{{/* Namespace declaration */}}
	// {{ $nameUpper }} acts as a namespaces to access query methods for the {{ $nameUpper }} model
	var {{ $nameUpper }} = {{ $nsQuery }}{}

	// {{ $nsQuery }} exposes query functions for the {{ $name }} model
	type {{ $nsQuery }} struct {
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				// {{ $field.Name.GoCase }}
				//
				// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
				{{- if $field.IsUnique }}
					// @unique
				{{- end }}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}
			{{ end }}

			{{- if $field.Kind.IsRelation }}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}Relations
			{{ end }}
		{{- end }}
	}

	{{ range $op := $.DMMF.Operators }}
		func ({{ $nsQuery }}) {{ $op.Name }}(params ...i{{ $nameUpper }}Params) {{ $name }}Params {
			var fields []builder.Field

			for _, q := range params {
				fields = append(fields, q.field())
			}

			return {{ $name }}Params{
				data: builder.Field{
					Name:     "{{ $op.Action }}",
					List:     true,
					WrapList: true,
					Fields:   fields,
				},
			}
		}
	{{ end }}

	{{/* composite keys for FindOne */}}
	{{ range $input := $.DMMF.Schema.UniqueCompoundTypes }}
		{{ range $index := $input.Fields }}
			// searched for field {{ $index.Name }}
			// type: {{ $index.InputType.Type.String }}
			{{ $i := $.DMMF.Schema.UniqueCompoundTypeByName $model.Name.String $index.InputType.Type.String }}
			{{ if $i }}
				func ({{ $nsQuery }}) {{ $index.Name.GoCase }}(
					{{- range $f := $i.Fields }}
						_{{- $f.Name.GoLowerCase }} i{{ $model.Name.GoCase }}WithPrisma{{ $f.Name.GoCase }}EqualsParams,
					{{ end -}}
				) i{{ $model.Name.GoCase }}EqualsParamsUnique {
					var fields []builder.Field

					{{ range $f := $i.Fields }}
						fields = append(fields, _{{ $f.Name.GoLowerCase }}.field())
					{{- end }}

					return {{ $model.Name.GoLowerCase }}EqualsParamsUnique{
						data: builder.Field{
							Name:   "{{ $index.Name }}",
							Fields: fields,
						},
					}
				}
			{{ end }}
		{{ end }}
	{{ end }}

	{{ range $field := $model.Fields }}
		{{ $struct := print $nsQuery $field.Name.GoCase $field.Type }}

		// base struct
		type {{ $struct }} struct {}

		{{ $setReturnStruct := "" }}
		{{ if $field.RequiredOnCreate }}
			{{ $setReturnStruct = (print $name "WithPrisma" $field.Name.GoCase "SetParams") }}
		{{ else }}
			{{ $setReturnStruct = (print $name "SetParams") }}
		{{ end}}

		{{ if $field.Kind.IsRelation }}
			type {{ $nsQuery }}{{ $field.Name.GoCase }}Relations struct {}

			{{ range $method := $field.RelationMethods }}
				// {{ $nameUpper }} -> {{ $field.Name.GoCase }}
				//
				// @relation
				// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
				func ({{ $nsQuery }}{{ $field.Name.GoCase }}Relations) {{ $method.Name }}(
					params ...i{{ $field.Type.GoCase }}Params,
				) {{ $name }}Params {
					var fields []builder.Field

					for _, q := range params {
						fields = append(fields, q.field())
					}

					return {{ $name }}Params{
						data: builder.Field{
							Name:   "{{ $field.Name }}",
							Action: "{{ $method.Action }}",
							Fields: fields,
						},
					}
				}
			{{ end }}

			{{/* With API */}}
			func ({{ $nsQuery }}{{ $field.Name.GoCase }}Relations) Fetch(
				{{ if $field.IsList }}
					params ...i{{ $field.Type.GoCase }}Params,
				{{ end }}
			) {{ $name }}To{{ $field.Name.GoCase }}Find{{ if $field.IsList }}Many{{ else }}One{{ end }} {
				var v {{ $name }}To{{ $field.Name.GoCase }}Find{{ if $field.IsList }}Many{{ else }}One{{ end }}

				v.query.Operation = "query"
				v.query.Method = "{{ $field.Name }}"
				v.query.Outputs = {{ $field.Type.GoLowerCase }}Output

				{{ if $field.IsList }}
					{{/* TODO create a function for this type of builder.Field colletion, also used in find.gotpl */}}
					var where []builder.Field
					for _, q := range params {
						if query := q.getQuery(); query.Operation != "" {
							v.query.Outputs = append(v.query.Outputs, builder.Output{
								Name:    query.Method,
								Inputs:  query.Inputs,
								Outputs: query.Outputs,
							})
						} else {
							where = append(where, q.field())
						}
					}

					if len(where) > 0 {
						v.query.Inputs = append(v.query.Inputs, builder.Input{
							Name:   "where",
							Fields: where,
						})
					}
				{{ end }}

				return v
			}

			func (r {{ $nsQuery }}{{ $field.Name.GoCase }}Relations) Link(
				params ...i{{ $field.Type.GoCase }}Params,
			) {{ $setReturnStruct }} {
				var fields []builder.Field

				for _, q := range params {
					fields = append(fields, q.field())
				}

				return {{ $setReturnStruct }}{
					data: builder.Field{
						Name: "{{ $field.Name }}",
						Fields: []builder.Field{
							{
								Name:   "connect",
								Fields: fields,
							},
						},
					},
				}
			}

			{{ if not $field.IsRequired }}
				func (r {{ $nsQuery }}{{ $field.Name.GoCase }}Relations) Unlink() {{ $setReturnStruct }} {
					return {{ $setReturnStruct }}{
						data: builder.Field{
							Name: "{{ $field.Name }}",
							Fields: []builder.Field{
								{
									Name:  "disconnect",
									Value: true,
								},
							},
						},
					}
				}
			{{ end }}
		{{ end }}

		{{ if $field.Kind.IncludeInStruct }}
			// Set the {{ if $field.IsRequired }}required{{ else }}optional{{ end }} value of {{ $field.Name.GoCase }}
			func (r {{ $struct }}) Set(value {{ if $field.IsList }}[]{{ end }}{{ $field.Type.Value }}) {{ $setReturnStruct }} {
				{{/* if scalar list (only postgres) */}}
				{{ if $field.IsList }}
					return {{ $setReturnStruct }}{
						data: builder.Field{
							Name:   "{{ $field.Name }}",
							Fields: []builder.Field{
								builder.Field{
									Name:   "set",
									Value:  value,
								},
							},
						},
					}
				{{ else }}
					return {{ $setReturnStruct }}{
						data: builder.Field{
							Name:   "{{ $field.Name }}",
							Value:  value,
						},
					}
				{{ end }}
			}

			{{ if and (not $field.IsRequired) (not $field.IsList) }}
				// Set the optional value of {{ $field.Name.GoCase }} dynamically
				func (r {{ $struct }}) SetOptional(value *{{ $field.Type.Value }}) {{ $setReturnStruct }} {
					if value == nil {
						{{/* nil value of type */}}
						var v *{{ $field.Type.Value }}
						return {{ $setReturnStruct }}{
							data: builder.Field{
								Name:  "{{ $field.Name }}",
								Value: v,
							},
						}
					}

					return r.Set(*value)
				}
			{{ end }}
		{{ end }}

		{{ $returnStruct := "" }}
		{{ if or ($field.IsID) ($field.IsUnique) }}
			{{ $returnStruct = (print $name "ParamsUnique") }}
		{{ else }}
			{{ $returnStruct = (print $name "Params") }}
		{{ end }}

		{{ if $field.Kind.IncludeInStruct }}
			{{/* Provide an `Equals` method for most types. */}}
			{{/* Equals has a special return type for individual fields */}}
			{{ $equalsReturnStruct := "" }}
			{{ if or ($field.IsID) ($field.IsUnique) }}
				{{ $equalsReturnStruct = (print $name "WithPrisma" $field.Name.GoCase "EqualsParamsUnique") }}
			{{ else }}
				{{ $equalsReturnStruct = (print $name "WithPrisma" $field.Name.GoCase "EqualsParams") }}
			{{ end }}
			func (r {{ $struct }}) Equals(value {{ $field.Type.Value }}) {{ $equalsReturnStruct }} {
				return {{ $equalsReturnStruct }}{
					data: builder.Field{
						Name:   "{{ $field.Name }}",
						Value:  value,
					},
				}
			}

			{{/* Provide an `In` method for most types. */}}
			func (r {{ $struct }}) In(values []{{ $field.Type.Value }}) {{ $returnStruct }} {
				f := builder.Field{
					Name:   "{{ $field.Name }}",
					Action: "in",
					List:   true,
				}
				for _, v := range values {
					f.Fields = append(f.Fields, builder.Field{
						Value: v,
					})
				}
				return {{ $returnStruct }}{
					data: f,
				}
			}

			{{ if not $field.IsRequired }}
				func (r {{ $struct }}) EqualsOptional(value *{{ $field.Type.Value }}) {{ $returnStruct }} {
					return {{ $returnStruct }}{
						data: builder.Field{
							Name:  "{{ $field.Name }}",
							Value: value,
						},
					}
				}

				func (r {{ $struct }}) IsNull() {{ $returnStruct }} {
					var str *string = nil
					return {{ $returnStruct }}{
						data: builder.Field{
							Name:  "{{ $field.Name }}",
							Value: str,
						},
					}
				}
			{{ end }}

			func (r {{ $struct }}) Order(direction runtime.Direction) {{ $name }}Params {
				return {{ $name }}Params{
					data: builder.Field{
						Name:  "{{ $field.Name }}",
						Value: direction,
					},
				}
			}

			{{/* If it's a unique ID, allow using these fields as cursor queries */}}
			{{ if or ($field.IsID) ($field.IsUnique) }}
				func (r {{ $struct }}) Cursor(cursor string) {{ $name }}CursorParams {
					return {{ $name }}CursorParams{
						data: builder.Field{
							Name:  "{{ $field.Name }}",
							Value: cursor,
						},
					}
				}
			{{ end }}
		{{ end }}

		{{/* Provide type-specific methods. */}}
		{{ range $type := $.DMMF.Types }}
			{{ if eq $field.Type $type.Name }}
				{{ range $method := $type.Methods }}
					func (r {{ $struct }}) {{ $method.Name }}(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: builder.Field{
								Action: "{{ $method.Action }}",
								Name:   "{{ $field.Name }}",
								Value:  value,
							},
						}
					}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}

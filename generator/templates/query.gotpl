{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $nsQuery := (print $name "Query") }}
	{{ $nsParams := (print $name "Params") }}

	{{/* Namespace declaration */}}
	// {{ $model.Name.GoCase }} acts as a namespaces to access query methods for the {{ $model.Name.GoCase }} model
	var {{ $model.Name.GoCase }} = {{ $nsQuery }}{
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				{{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}{
					name: "{{ $field.Name.GoLowerCase }}",
				},
			{{- end -}}
		{{- end }}
	}

	// {{ $nsQuery }} exposes query functions for the {{ $name }} model
	type {{ $nsQuery }} struct {
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				// {{ $field.Name.GoCase }}
				//
				// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
				{{- if $field.IsUnique }}
					// @unique
				{{- end }}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}
			{{ end }}
		{{- end }}
	}

	{{ range $field := $model.Fields }}
		{{ $nsField := print $nsQuery $field.Name.GoCase }}
		{{ $nsFieldParams := (print $name $field.Name.GoCase "SetParams") }}
		{{ $struct := print $nsField $field.Type }}

		type {{ $struct }} struct {
			name string
		}

		{{ $setReturnStruct := "" }}
		{{ if $field.IsRequired }}
			{{ $setReturnStruct = $nsFieldParams }}
		{{ else }}
			{{ $setReturnStruct = (print $name "SetParams") }}
		{{ end}}

		// Set the {{ if $field.IsRequired }}required{{ else }}optional{{ end }} value of {{ $field.Name.GoCase }}
		func (r {{ $struct }}) Set(value {{ $field.Type.Value }}) {{ $setReturnStruct }} {
			return {{ $setReturnStruct }}{
				data: field{
					action: "equals",
					name:   r.name,
					value:  value,
				},
			}
		}

		{{ $returnStruct := "" }}
		{{ if $field.IsRequired }}
			{{ $returnStruct = (print $name "ParamsUnique") }}
		{{ else }}
			{{ $returnStruct = (print $name "Params") }}
		{{ end}}

		{{ if eq $field.Type "String" }}
			func (r {{ $struct }}) Equals(value string) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "equals",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) Contains(value string) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "contains",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) HasPrefix(value string) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "starts_with",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) HasSuffix(value string) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "ends_with",
						name:   r.name,
						value:  value,
					},
				}
			}
		{{ end }}

		{{ if eq $field.Type "DateTime" }}
			func (r {{ $struct }}) Equals(value time.Time) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "equals",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) Before(value time.Time) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "lt",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) After(value time.Time) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "gt",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) BeforeEquals(value time.Time) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "lte",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) AfterEquals(value time.Time) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "gte",
						name:   r.name,
						value:  value,
					},
				}
			}
		{{ end }}

		{{ if eq $field.Type "Boolean" }}
			func (r {{ $struct }}) Equals(value bool) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "equals",
						name:   r.name,
						value:  value,
					},
				}
			}
		{{ end }}

		{{ if or (eq $field.Type "Int") (eq $field.Type "Float") }}
			func (r {{ $struct }}) Equals(value int) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "equals",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) GT(value int) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "gt",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) GTE(value int) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "gte",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) LT(value int) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "lt",
						name:   r.name,
						value:  value,
					},
				}
			}

			func (r {{ $struct }}) LTE(value int) {{ $returnStruct }} {
				return {{ $returnStruct }}{
					data: field{
						action: "lte",
						name:   r.name,
						value:  value,
					},
				}
			}
  	{{ end }}
  {{ end }}
{{ end }}

{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $nsQuery := (print $name "Query") }}
	{{ $nsParams := (print $name "Params") }}

	{{/* Namespace declaration */}}
	// {{ $model.Name.GoCase }} acts as a namespaces to access query methods for the {{ $model.Name.GoCase }} model
	var {{ $model.Name.GoCase }} = {{ $nsQuery }}{
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				{{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}{
					{{ $nsQuery }}{{ $field.Type }}: {{ $nsQuery }}{{ $field.Type }}{
						name: "{{ $field.Name.GoLowerCase }}",
					},
				},
			{{- end -}}
		{{- end }}
	}

	// {{ $nsQuery }} exposes query functions for the {{ $name }} model
	type {{ $nsQuery }} struct {
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				// {{ $field.Name.GoCase }}
				//
				// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
				{{- if $field.IsUnique }}
					// @unique
				{{- end }}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}
			{{ end }}
		{{- end }}
	}

	{{ range $field := $model.Fields }}
		{{ $nsField := print $nsQuery $field.Name.GoCase }}
		{{ $nsFieldParams := (print $name $field.Name.GoCase "SetParams") }}

		type {{ $nsField }}{{ $field.Type }} struct {
			{{/* embeds common field predicates */}}
			{{ $nsQuery }}{{ $field.Type }}
		}

		{{ $setReturnStruct := "" }}
		{{ if $field.IsRequired }}
			{{ $setReturnStruct = $nsFieldParams}}
		{{ else }}
			{{ $setReturnStruct = (print $name "SetParams") }}
		{{ end}}

		// Set the {{ if $field.IsRequired }}required{{ else }}optional{{ end }} value of {{ $field.Name.GoCase }}
		func (r {{ $nsField }}{{ $field.Type }}) Set(value {{ $field.Type.Value }}) {{ $setReturnStruct }} {
			return {{ $setReturnStruct }}{
				data: field{
					action: "equals",
					name:   r.name,
					value:  value,
				},
			}
		}
	{{ end }}

	type {{ $nsQuery }}String struct {
		name string
	}

	func (r {{ $nsQuery }}String) Equals(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}String) Contains(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "contains",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}String) HasPrefix(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "starts_with",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}String) HasSuffix(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "ends_with",
				name:   r.name,
				value:  value,
			},
		}
	}

	type {{ $nsQuery }}DateTime struct {
		name string
	}

	func (r {{ $nsQuery }}DateTime) Equals(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}DateTime) Before(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "lt",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}DateTime) After(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "gt",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}DateTime) BeforeEquals(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "lte",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}DateTime) AfterEquals(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "gte",
				name:   r.name,
				value:  value,
			},
		}
	}

	type {{ $nsQuery }}Boolean struct {
		name string
	}

	func (r {{ $nsQuery }}Boolean) Equals(value bool) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	type {{ $nsQuery }}Int struct {
		name string
	}

	func (r {{ $nsQuery }}Int) Equals(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}Int) GT(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "gt",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}Int) GTE(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "gte",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}Int) LT(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "lt",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}Int) LTE(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "lte",
				name:   r.name,
				value:  value,
			},
		}
	}
{{ end }}

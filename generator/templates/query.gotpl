{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoLowerCase }}
	{{ $nsQuery := (print $name "Query") }}
	{{ $nsParams := (print $name "Params") }}

	{{/* Namespace declaration */}}
	// {{ $model.Name.GoCase }} acts as a namespaces to access query methods for the {{ $model.Name.GoCase }} model
	var {{ $model.Name.GoCase }} = {{ $nsQuery }}{}

	// {{ $nsQuery }} exposes query functions for the {{ $name }} model
	type {{ $nsQuery }} struct {
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				// {{ $field.Name.GoCase }}
				//
				// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
				{{- if $field.IsUnique }}
					// @unique
				{{- end }}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}
			{{ end }}
		{{- end }}
	}

	{{ range $field := $model.Fields }}
		{{ $nsField := print $nsQuery $field.Name.GoCase }}
		{{ $nsFieldParams := (print $name $field.Name.GoCase "SetParams") }}
		{{ $struct := print $nsField $field.Type }}

		// base struct
		type {{ $struct }} struct {}

		{{ range $toField := $model.Fields }}
			{{ if $field.Kind.IsRelation }}
				// extra type relation struct
				type {{ $nsQuery }}{{ $toField.Name.GoCase}}{{ $toField.Type }}To{{ $field.Name.GoCase }} struct {}
			{{ end }}
		{{ end }}

		{{ if $field.Kind.IsRelation }}
			{{/* Attach relations to the $nsQuery struct */}}
			// {{ $field.Name.GoCase }}
			//
			// @relation
			// @{{ if $field.IsRequired }}required{{ else }}optional{{ end }}
			func ({{ $nsQuery }}) {{ $field.Name.GoCase }}() {{ $field.Type.GoLowerCase }}To{{ $model.Name.GoCase }}Query {
				return {{ $field.Type.GoLowerCase }}To{{ $model.Name.GoCase }}Query{}
			}

			{{/* Generate nested variations for relations */}}

			type {{ $name }}To{{ $field.Type }}Query struct {
				{{- range $toField := $model.Fields }}
					{{/* Filter non-relations only for now */}}
					{{- if $toField.Kind.IncludeInStruct -}}
						// {{ $toField.Name.GoCase }}
						//
						// @{{ if $toField.IsRequired }}required{{ else }}optional{{ end }}
						{{- if $toField.IsUnique }}
							// @unique
						{{- end }}
						{{ $toField.Name.GoCase }} {{ $nsQuery }}{{ $toField.Name.GoCase }}{{ $toField.Type }}To{{ $field.Name.GoCase }}
					{{ end }}
				{{- end }}
			}
		{{ end }}

		{{ $setReturnStruct := "" }}
		{{ if $field.IsRequired }}
			{{ $setReturnStruct = $nsFieldParams }}
		{{ else }}
			{{ $setReturnStruct = (print $name "SetParams") }}
		{{ end}}

		{{ if $field.Kind.IncludeInStruct }}
			// Set the {{ if $field.IsRequired }}required{{ else }}optional{{ end }} value of {{ $field.Name.GoCase }}
			func (r {{ $struct }}) Set(value {{ $field.Type.Value }}) {{ $setReturnStruct }} {
				return {{ $setReturnStruct }}{
					data: field{
						action: "equals",
						name:   "{{ $field.Name.CamelCase }}",
						value:  value,
					},
				}
			}
		{{ end }}

		{{ range $toField := $model.Fields }}
			{{ $rel := false }}
			{{ $cp := "" }}
			{{ $n := $name }}
			{{ if eq $toField.Name $field.Name }}
				{{ $cp = $struct }}
			{{ else if $toField.Kind.IsRelation }}
				{{ $cp = print $struct "To" $toField.Name.GoCase }}
				{{ $rel = true }}
				{{ $n = $toField.Type.GoLowerCase }}
			{{ end }}

			{{ $returnStruct := "" }}
			{{ if or ($field.IsID) ($field.IsUnique) }}
				{{ $returnStruct = (print $n "ParamsUnique") }}
			{{ else }}
				{{ $returnStruct = (print $n "Params") }}
			{{ end }}

			{{ if ne $cp "" }}
				{{ if eq $field.Type "String" }}
					func (r {{ $cp }}) Equals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "equals",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) Contains(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "contains",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) HasPrefix(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "starts_with",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) HasSuffix(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "ends_with",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}
				{{ end }}

				{{ if eq $field.Type "DateTime" }}
					func (r {{ $cp }}) Equals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "equals",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) Before(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "lt",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) After(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "gt",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) BeforeEquals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "lte",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) AfterEquals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "gte",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}
				{{ end }}

				{{ if eq $field.Type "Boolean" }}
					func (r {{ $cp }}) Equals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "equals",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}
				{{ end }}

				{{ if or (eq $field.Type "Int") (eq $field.Type "Float") }}
					func (r {{ $cp }}) Equals(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "equals",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) GT(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "gt",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) GTE(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "gte",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) LT(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "lt",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}

					func (r {{ $cp }}) LTE(value {{ $field.Type.Value }}) {{ $returnStruct }} {
						return {{ $returnStruct }}{
							data: field{
								action: "lte",
								name:   "{{ $field.Name.CamelCase }}",
								value:  value,
							},
						}
					}
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}

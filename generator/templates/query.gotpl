{{- /*gotype:github.com/prisma/photongo/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ $name := $model.Name.GoCase }}
	{{ $nsQuery := (print $name "Query") }}
	{{ $nsParams := (print $name "Params") }}

	{{/* Namespace declaration */}}
	var {{ $name }} = {{ $nsQuery }}{
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				{{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}{
					{{ $nsQuery }}{{ $field.Type }}: {{ $nsQuery }}{{ $field.Type }}{
						name: "{{ $field.Name.GoLowerCase }}",
					},
				},
			{{- end -}}
		{{- end }}
	}

	type {{ $nsQuery }} struct {
		{{- range $field := $model.Fields }}
			{{/* Filter non-relations only for now */}}
			{{- if $field.Kind.IncludeInStruct -}}
				{{ $field.Name.GoCase }} {{ $nsQuery }}{{ $field.Name.GoCase }}{{ $field.Type }}
			{{- end -}}
		{{- end }}
	}

	{{ range $field := $model.Fields }}
		{{ $nsField := print $nsQuery $field.Name.GoCase }}
		{{ $nsFieldParams := (print $name $field.Name.GoCase "SetParams") }}

		type {{ $nsField }}String struct {
			{{/* embeds common fields like Equals, etc. which are same regardless the field */}}
			{{ $nsQuery }}String
		}

		{{ $setReturnStruct := "" }}
		{{ if $field.IsRequired }}
			{{ $setReturnStruct = $nsFieldParams}}
		{{ else }}
			{{ $setReturnStruct = (print $name "SetParams") }}
		{{ end}}

		// Set the {{ if $field.IsRequired }}required{{ else }}optional{{ end }} value of {{ $field.Name.GoCase }}
		func (r {{ $nsField }}String) Set(value string) {{ $setReturnStruct }} {
			return {{ $setReturnStruct }}{
				data: field{
					action: "equals",
					name:   r.name,
					value:  value,
				},
			}
		}
	{{ end }}

	// {{ $name }} String
	type {{ $nsQuery }}String struct {
		// name saves the data to pass between chains
		name string
	}

	func (r {{ $nsQuery }}String) Equals(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	func (r {{ $nsQuery }}String) Contains(value string) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "contains",
				name:   r.name,
				value:  value,
			},
		}
	}

	// {{ $name }} DateTime
	type {{ $nsQuery }}DateTime struct {
		// name saves the data to pass between chains
		name string
	}

	func (r {{ $nsQuery }}DateTime) Equals(value time.Time) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	// {{ $name }} Boolean
	type {{ $nsQuery }}Boolean struct {
		// name saves the data to pass between chains
		name string
	}

	func (r {{ $nsQuery }}Boolean) Equals(value bool) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}

	// {{ $name }} Int
	type {{ $nsQuery }}Int struct {
		// name saves the data to pass between chains
		name string
	}

	func (r {{ $nsQuery }}Int) Equals(value int) {{ $nsParams }} {
		return {{ $nsParams }}{
			data: field{
				action: "equals",
				name:   r.name,
				value:  value,
			},
		}
	}
{{ end }}

{{- /*gotype:github.com/prisma/prisma-client-go/generator.Root*/ -}}

type iLoadable interface {
	loadable()
	getQuery() builder.Query
}

func (c *Client) Load(params ...iLoadable) loadExec {
	return loadExec{c, params}
}

type loadExec struct {
	client *Client
	queries []iLoadable
}

func (r loadExec) Exec(ctx context.Context, v interface{}) error {
	var query string
	query += "query {"
	for _, q := range r.queries {
		query += q.getQuery().Build() + "\n"
	}
	query += "}"

	{{/* TODO use specific log level */}}
	if logger.Enabled {
		log.Printf("prisma query: `%s`", query)
	}

	var result struct{
		Errors []engine.GQLError `json:"errors"`
		Data   json.RawMessage   `json:"data"`
	}
	if err := r.client.Engine.Do(ctx, query, &result); err != nil {
		return fmt.Errorf("query failed: `%s` %w", query, err)
	}

	if result.Errors != nil {
		first := result.Errors[0]
		return fmt.Errorf(first.Message)
	}

	if err := json.Unmarshal(result.Data, v); err != nil {
		return fmt.Errorf("could not decode result.Data: %w", err)
	}

	return nil
}
